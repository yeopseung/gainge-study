/// Local Storage
// 브라우저가 가지고 있는 작은 DB
// 로컬 저장소에 추가, 삭제 등을 수행할 수 있음
// 로컬 저장소로 관리하기 때문에 브라우저가 새로고침 되어도 삭제되지 않음
// 개발자 모드 Application 카테고리에서 확인 가능

/// QuerySelector
// document.getElementById을 사용하여 id=login-form을 가진 태그를 불러옴
// const  loginForm = document.getElementById("login-form");
// 또는 document.querySelector를 사용하여 불러올 수 있음 (ClassName, Id, TagName 모두 가능)

/// Callback Method
// 버튼 클릭 또는 엔터 입력시 Submit 이벤트 실행
// 이를 감지하는 콜백 메소드 - onLoginSubmit
// 이벤트 리스너는 첫번째 매개변수로 event에 대한 정보를 전달해준다 - event

/// setInterval - 특정 시간 간격마다 함수 실행
// 5초(5000ms)마다 sayHello 함수 실행
// setInterval(sayHello, 5000);

/// setTimeout 지정한 시간이 지나면 함수 실행
// 5초(5000ms)가 지나면 sayHello 함수 실행
// setTimeout(sayHello, 5000);

/// padStart, padEnd
// 문자열의 길이를 지정하고 빈 공간을 무엇으로 채울지 정할 수 있는 메소드
// 시간을 출력할 때 유용
// if. 12:30:1 -> 12:30:01 => date.getSeconds().padStart(2,"0")

/// document.createElement
// 이를 통해 <img> 태그와 같은 요소를 JavaScript 코드에서 생성하여 HTML에 추가할 수 있음
// 생성 - const bgImage = document.createElement("img"); (<img> 생성)
// 설정 - bgImage.src = `img/${chosenImage}`; (<img src="img/x.png"> - 이미지 src 추가)
// 추가 - document.body.appendChild(bgImage); (<body>의 자식으로 추가)

/// JSON.stringify()
// 어느 Object든 형태를 보존하며 String으로 변형시켜 줌

/// JSON.parse()
// String 형태로 된 값을 원래 형태의 Object로 변형시켜 줌

/// array.forEach(element => {})
// array의 요소들을 순회하며 처리할 수 있음

/// array.filter(element => {})
// array의 요소들을 순회하며 특정 요소들을 제외할 수 있음
// function을 전달하며 리턴 값이 true면 유지, false면 제외 -> 필터가 적용된 array 리턴
// array.filter(element => { return element.id == 1;}); -> id가 1인 요소만 리턴